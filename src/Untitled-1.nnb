{
    "cells": [
        {
            "language": "javascript",
            "source": [
                "function getCurveProgress(pointA, angle = 90) {\n  // Check if angle is within valid range\n  if (angle < 1 || angle > 170) {\n      throw new Error('Angle must be between 1 and 170 degrees');\n  }\n\n  // Convert angle to radians\n  const angleRad = angle * Math.PI / 180;\n\n  // Calculate the coordinates of the third point (midpoint)\n  const point3 = [pointA[0] / 2, pointA[1] / 2];\n\n  // Calculate the radius of the circle (distance between pointA and point3)\n  const radius = Math.sqrt((pointA[0] - point3[0])**2 + (pointA[1] - point3[1])**2);\n\n  // Return a function that calculates the position on the curve\n  return function progress(n) {\n      // Inverse the progress value\n      n = 1 - n;\n\n      // Calculate the angle of the current position\n      const progressAngle = angleRad - n * angleRad;\n\n      // Calculate the coordinates of the current position\n      return {\n          x: radius * Math.cos(progressAngle) + point3[0],\n          y: radius * Math.sin(progressAngle) + point3[1]\n      };\n  };\n}\n\nconst a = getCurveProgress([100, 100], 90)\n\nconsole.log(a(0))\nconsole.log(a(0.25))\nconsole.log(a(0.5))\nconsole.log(a(0.75))\nconsole.log(a(1))\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function findP3(p2Coords, p3angle) {\n  const p1rad = (90 - p3angle) * Math.PI / 180 // angle at p1 in radians\n\n  // Calculate p1p2Distance\n  const p1p2Distance = Math.sqrt((p2Coords[0]**2) + (p2Coords[1]**2))\n\n  // Calculate p2p3Distance using the tangent of the angle at p3\n  const p2p3Distance = p1p2Distance * Math.tan(p1rad)\n  const p1p3Distance = Math.sqrt((p1p2Distance**2) + (p2p3Distance**2))\n\n  // Calculate the unit vector from p1 to p2\n  const unitVectorP1P2 = [p2Coords[0] / p1p2Distance, p2Coords[1] / p1p2Distance]\n\n  // Rotate this unit vector by the angle at p1 to get the unit vector from p1 to p3\n  const unitVectorP1P3 = [\n    unitVectorP1P2[0] * Math.cos(p1rad) + unitVectorP1P2[1] * Math.sin(p1rad),\n    -unitVectorP1P2[0] * Math.sin(p1rad) + unitVectorP1P2[1] * Math.cos(p1rad)\n  ]\n\n  // Multiply this unit vector by the length of the side from p1 to p3 to get the vector from p1 to p3\n  const vectorP1P3 = [unitVectorP1P3[0] * p1p3Distance, unitVectorP1P3[1] * p1p3Distance]\n\n  // Add this vector to the coordinates of p1 to get the coordinates of p3\n  const p3Coords = [Math.round(vectorP1P3[0]), Math.round(vectorP1P3[1])]\n\n  return p3Coords\n}\n\n\nconsole.log(findP3([50,50], 45))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 99.99999999999997, 1.1102230246251564e-14 ]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "\nconst generateCubicBezierEasing = points => progress => {\n  const [x1, y1, x2, y2] = points;\n  const u = 1 - progress;\n  return u * u * u * p1 + 3 * u * u * progress * p2 + 3 * u * progress * progress * p3 + progress * progress * progress * p4;\n}\n\nconst curve = generateCubicBezierEasing([0.42, 0, 0.58, 1]);\n\nfor (let i = 0; i <= 1; i += 0.01) {\n  console.log(`${i.toFixed(2)} -> ${curve(i).toFixed(2)}`);\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "0.00 -> 0.42",
                                "0.01 -> 0.41",
                                "0.02 -> 0.40",
                                "0.03 -> 0.38",
                                "0.04 -> 0.37",
                                "0.05 -> 0.36",
                                "0.06 -> 0.35",
                                "0.07 -> 0.35",
                                "0.08 -> 0.34",
                                "0.09 -> 0.33",
                                "0.10 -> 0.32",
                                "0.11 -> 0.32",
                                "0.12 -> 0.31",
                                "0.13 -> 0.30",
                                "0.14 -> 0.30",
                                "0.15 -> 0.29",
                                "0.16 -> 0.29",
                                "0.17 -> 0.29",
                                "0.18 -> 0.28",
                                "0.19 -> 0.28",
                                "0.20 -> 0.28",
                                "0.21 -> 0.28",
                                "0.22 -> 0.28",
                                "0.23 -> 0.27",
                                "0.24 -> 0.27",
                                "0.25 -> 0.27",
                                "0.26 -> 0.27",
                                "0.27 -> 0.28",
                                "0.28 -> 0.28",
                                "0.29 -> 0.28",
                                "0.30 -> 0.28",
                                "0.31 -> 0.28",
                                "0.32 -> 0.29",
                                "0.33 -> 0.29",
                                "0.34 -> 0.29",
                                "0.35 -> 0.30",
                                "0.36 -> 0.30",
                                "0.37 -> 0.31",
                                "0.38 -> 0.31",
                                "0.39 -> 0.32",
                                "0.40 -> 0.32",
                                "0.41 -> 0.33",
                                "0.42 -> 0.33",
                                "0.43 -> 0.34",
                                "0.44 -> 0.35",
                                "0.45 -> 0.35",
                                "0.46 -> 0.36",
                                "0.47 -> 0.37",
                                "0.48 -> 0.38",
                                "0.49 -> 0.39",
                                "0.50 -> 0.40",
                                "0.51 -> 0.40",
                                "0.52 -> 0.41",
                                "0.53 -> 0.42",
                                "0.54 -> 0.43",
                                "0.55 -> 0.44",
                                "0.56 -> 0.45",
                                "0.57 -> 0.46",
                                "0.58 -> 0.47",
                                "0.59 -> 0.48",
                                "0.60 -> 0.49",
                                "0.61 -> 0.50",
                                "0.62 -> 0.52",
                                "0.63 -> 0.53",
                                "0.64 -> 0.54",
                                "0.65 -> 0.55",
                                "0.66 -> 0.56",
                                "0.67 -> 0.57",
                                "0.68 -> 0.59",
                                "0.69 -> 0.60",
                                "0.70 -> 0.61",
                                "0.71 -> 0.62",
                                "0.72 -> 0.64",
                                "0.73 -> 0.65",
                                "0.74 -> 0.66",
                                "0.75 -> 0.67",
                                "0.76 -> 0.69",
                                "0.77 -> 0.70",
                                "0.78 -> 0.71",
                                "0.79 -> 0.72",
                                "0.80 -> 0.74",
                                "0.81 -> 0.75",
                                "0.82 -> 0.76",
                                "0.83 -> 0.78",
                                "0.84 -> 0.79",
                                "0.85 -> 0.80",
                                "0.86 -> 0.82",
                                "0.87 -> 0.83",
                                "0.88 -> 0.84",
                                "0.89 -> 0.86",
                                "0.90 -> 0.87",
                                "0.91 -> 0.88",
                                "0.92 -> 0.90",
                                "0.93 -> 0.91",
                                "0.94 -> 0.92",
                                "0.95 -> 0.94",
                                "0.96 -> 0.95",
                                "0.97 -> 0.96",
                                "0.98 -> 0.97",
                                "0.99 -> 0.99",
                                ""
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}